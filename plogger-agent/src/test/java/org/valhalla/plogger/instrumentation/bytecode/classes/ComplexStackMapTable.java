package org.valhalla.plogger.instrumentation.bytecode.classes;

/*
MIT License

Copyright (c) 2020 Claudio Corsi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

/**
 * This class will contain different StackMapTable entries that can be tested by the
 * ClassFile implementation to be able to determine if it is possible for this tool
 * to load and process these types of generated byte code.
 *
 * Here is the list of different StackMapTable entries that should be implemented
 * within this particular class.
 *
 *      Same Frame
 *          - This just implies that you are within a new block but no additional
 *            locals or stack items were added/used within this block
 *      Same Locals 1 Stack Item Frame
 *          - This implies that the current block of code will add a single
 *            item to the stack of the code. While the number of locals stay
 *            the same.
 *      Same Locals 1 Stack Item Extended Frame
 *          - This is similar to the Same Locals 1 Stack Item Frame but it
 *            includes an offset that is used to determine where this stack
 *            frame starts.  This is used because this frame will be more than
 *            63 bytes from the prior stack frame
 *      Chop Frame
 *          - This implies that this frame will reduce the number of stack items
 *            from 1 to 3 stack items.  While the number of local variables stays
 *            the same
 *      Same Extended Frame
 *          - This is similar as the Same Frame but it includes an offset that is
 *            used to stare where the stack frame starts from the prior stack frame.
 *            This value will be greater than 63 since the Same Frame can only
 *            handle up to 63 bytes from the prior stack frame
 *      Append Frame
 *          - This frame implies that 1 to 3 locals variables are being added to
 *            this stack frame compared to the prior stack frame.  While the
 *            number of stack items will be the same
 *      Full Frame
 *          - This frame implies that new local variable{s} or stack item{s} are
 *            being added to the this frame compared to the prior stack frame.
 *            The number of local variable{s} or stack item{s} are not limited
 *            compared to some of the prior stack frames.
 *
 *  Each of the above stack frames added/removed local variables and/or stack items
 *  will contain a verification type information that is used by the jvm to insure
 *  that we are processing the expected types.  The following are the available list
 *  of verification types:
 *
 *      Top: The referencing type is supposed to be a top variable
 *      Integer:  The referencing type is supposed to be an integer type
 *      Float: The referencing type is supposed to be a float type
 *      Long: The referencing type is supposed to be a long type
 *      Double: The referencing type is supposed to be a double type
 *      Null: The referencing type is set to null
 *      UninitializedThis:
 *      Object: The referencing type is supposed to be a Class type
 *      Uninitialized: The referencing type is supposed to be created by the new call
 */
public class ComplexStackMapTable {
    public ComplexStackMapTable() {

    }

    public void simple(int a, int b, Object o) {
        System.out.println("Calling simple");
        int value = 101;
        try {
            if (o != null) {
                long v = (Long) o;
                value = (int) v;
            } else {
                long v = 101;
                value = (int) v;
            }
        } catch(NumberFormatException nfe) {
            nfe.printStackTrace(System.out);
        } finally {
            long l = 10002;
            l++;
            System.out.println("Oh no, an exception was raised: " + l);
        }
        System.out.println("Called simple");
    }
}
